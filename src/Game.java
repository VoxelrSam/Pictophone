import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONObject;

/**
 * Class used to represent Games on the server
 * Handles all the game logic and keeping track of users
 * 
 * @author Samuel Ingram
 *
 */
public class Game implements Runnable{
	
	/**
	 * HashMap of Game id's to Game objects to keep track of all games
	 */
	private static HashMap<String, Game> games = new HashMap<>();
	
	private ArrayList<User> users;
	private User owner;
	private int size;
	private String name;
	private String key;
	private String stage;
	
	public Game(User owner, String name, int size) {
		this.owner = owner;
		this.name = name;
		this.size = size;
		this.key = Utils.generateKey();
		this.stage = "filling";
		
		games.put(this.key, this);
		
		users = new ArrayList<>();
		users.add(owner);
		owner.setGame(this);
		
		System.out.println("Game generated by " + owner.getName() + " of size " + size + " with id " + this.key);
	}
	
	/**
	 * Starts the game on a new thread
	 */
	public void start() {
		this.stage = "init";
		(new Thread(this)).start();
	}
	
	/**
	 * Where all the game logic starts (used by the thread)
	 */
	public void run() {
		JSONObject message = new JSONObject();
		message.put("type", "void");
		
		sendToAll(message);
	}
	
	/**
	 * Sends a message to all the users in the game
	 * 
	 * @param message the JSONObject representing the message to be sent
	 */
	public void sendToAll(JSONObject message) {
		for (User user : users) {
			user.send(message);
		}
	}
	
	/**
	 * Adds a user to the game, and sets the user's current game to this one
	 * Also starts game if the max amount of players join
	 * 
	 * @param u The user to be added
	 * @return 0 if success, 1 if otherwise
	 */
	public int addUser(User u) {
		if (users.size() == size || !stage.equals("filling"))
			return 1;
		
		users.add(u);
		u.setGame(this);
		
		if (users.size() == size)
			this.start();
		
		return 0;
	}

	public ArrayList<User> getUsers(){
		return users;
	}
	
	public String getName() {
		return name;
	}
	
	public String getKey() {
		return key;
	}
	
	public static Game getGame(String key) {
		return games.get(key);
	}
}
